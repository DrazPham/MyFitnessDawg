import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import {
  doc,
  getDoc,
  setDoc,
  serverTimestamp,
} from "firebase/firestore";
import { db } from "src/firebase/index.jsx";
import axios from "axios";
import ReactMarkdown from "react-markdown";
import SpeakTextButton from "../../components/common/speakTextButton";
import "assets/css/chat/index.css";


function Exercise() {
    const { i18n } = useTranslation();
    const [userInput, setUserInput] = useState("");
    const [messages, setMessages] = useState([]);
    useEffect(() => {
      if (i18n.language === "vi") {
        setMessages([{
          sender: "bot",
          text: "Xin ch√†o! B·∫°n c√≥ th·ªÉ nh·∫≠p m·ªôt ho·∫°t ƒë·ªông th·ªÉ ch·∫•t k√®m theo th·ªùi gian th·ª±c hi·ªán t√≠nh b·∫±ng ph√∫t. N·∫øu kh√¥ng ghi r√µ th·ªùi gian, t√¥i s·∫Ω m·∫∑c ƒë·ªãnh l√† 60 ph√∫t. V√≠ d·ª•: N·∫øu ch∆∞a bi·∫øt ch·ªçn ho·∫°t ƒë·ªông n√†o, h√£y nh·∫≠p 'danh s√°ch' ho·∫∑c 'ho·∫°t ƒë·ªông', ch√∫ng t√¥i s·∫Ω ƒë·ªÅ xu·∫•t c√°c  ho·∫°t ƒë·ªông c√≥ s·∫µn  ",
        }]);
      } else {
        setMessages([{
          sender: "bot",
          text: "Hello! You can enter a physical activity along with the duration in minutes. If no time is provided, I will assume 60 minutes by default.\n\nIf you are not sure what to choose, type 'list' and we will suggest available options.",
        }]);
      }
    }, [i18n.language]);
  const [loading, setLoading] = useState(false);
  const [exercise, setExercise] = useState([]);
  const userID = localStorage.getItem("userID");

  const sendMessage = async () => {
    if (!userInput.trim()) return;

    const newUserMessage = { sender: "user", text: userInput };
    setMessages((prev) => [...prev, newUserMessage]);
    setLoading(true);

    try {
      const res = await axios.post("http://127.0.0.1:2020/exercise", {
        prompt: userInput,
      });

      const botText = res.data.reply;
      const botMessage = { sender: "bot", text: botText };
      setMessages((prev) => [...prev, botMessage]);

const caloriesMatch = botText.match(/(\d+(?:\.\d+)?)\s*(?:kcal|calories|calo|Calo)/i);
const minutesMatch = botText.match(/(\d+(?:\.\d+)?)\s*(?:minutes?|mins?)/i);

if (caloriesMatch) {
  const calories = parseFloat(caloriesMatch[1]);
  const minutes = minutesMatch ? parseFloat(minutesMatch[1]) : 60;

  const exerciseItem = { calories, minutes };
  setExercise((prev) => [...prev, exerciseItem]);
}

    } catch (error) {
      const errorMessage = {
        sender: "bot",
        text: "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.",
      };
      setMessages((prev) => [...prev, errorMessage]);
      console.error("L·ªói khi g·ª≠i request:", error);
    }

    setUserInput("");
    setLoading(false);
  };

  useEffect(() => {
  const updateFirestoreCart = async () => {
    if (!userID || exercise.length === 0) return;

    try {
      const docRef = doc(db, "users", userID);
      const docSnap = await getDoc(docRef);

      const today = new Date().toISOString().split("T")[0]; // L·∫•y ƒë·ªãnh d·∫°ng yyyy-mm-dd
      let resetCart = false;
      let updatedExercise = [];

      if (docSnap.exists()) {
        const data = docSnap.data();
        const existingCart = data.Cart || [];
        const lastUpdatedDate = data.lastCartUpdate?.toDate?.().toISOString().split("T")[0];

        if (lastUpdatedDate !== today) {
          // Ng√†y m·ªõi => reset exercise
          resetCart = true;
          updatedExercise = [...exercise];
        } else {
          updatedExercise = [...existingCart, ...exercise];
        }
      } else {
        updatedExercise = [...exercise];
        resetCart = true;
      }

      await setDoc(docRef, {
        Exercise: updatedExercise,
        lastCartUpdate: serverTimestamp()
      }, { merge: true });

      if (resetCart) {
        console.log("üóì Cart ƒë∆∞·ª£c reset do ng√†y m·ªõi:", today);
      }

      console.log("‚úÖ Firestore c·∫≠p nh·∫≠t th√†nh c√¥ng:", updatedExercise);
    } catch (err) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t Firestore:", err);
    }
  };

  updateFirestoreCart();
}, [exercise]);

  return (
    <main>
      <div className="wrapper aximo-all-section chat">
        <div className="chatTop">
          {messages.map((msg, idx) => (
            <div
              className="chatElementsOutter"
              key={idx}
              style={{
                display: "flex",
                justifyContent:
                  msg.sender === "user" ? "flex-end" : "flex-start",
                marginBottom: "0.5rem",
              }}
            >
              <div className="chatElements">
                <ReactMarkdown>{msg.text}</ReactMarkdown>
                <SpeakTextButton text={msg.text} lang={i18n.language} />
              </div>
            </div>
          ))}
        </div>

        <div className="chatBottomGroup">
          <input
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder="Nh·∫≠p t√™n b√†i t·∫≠p (VD: ch·∫°y 30 ph√∫t)..."
            onKeyDown={(e) => e.key === "Enter" && sendMessage()}
            className="chatInput"
          />
          <button
            className="chatButton"
            onClick={sendMessage}
            disabled={loading}
          >
            {loading ? "..." : "G·ª≠i"}
          </button>
        </div>
      </div>
    </main>
  );
}

export default Exercise;
