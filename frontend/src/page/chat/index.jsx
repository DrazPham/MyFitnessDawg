import { useState, useEffect } from "react";
import { useTranslation } from "react-i18next";
import {
  doc,
  getDoc,
  setDoc,
  updateDoc,
  serverTimestamp,
} from "firebase/firestore";
import { db } from "src/firebase/index.jsx";
import axios from "axios";
import ReactMarkdown from "react-markdown";
import SpeakTextButton from "../../components/common/speakTextButton";
import "assets/css/chat/index.css";

function Chat() {
  const { i18n } = useTranslation();
  const { t } = useTranslation();

  const [userInput, setUserInput] = useState("");
  const [messages, setMessages] = useState([]);
  useEffect(() => {
    if (i18n.language === "vi") {
      setMessages([{
        sender: "bot",
        text: "Xin ch√†o! Vui l√≤ng nh·∫≠p t√™n th·ª±c ph·∫©m k√®m theo s·ªë l∆∞·ª£ng t√≠nh b·∫±ng gam, t√¥i s·∫Ω th√™m gi√° tr·ªã dinh d∆∞·ª°ng c·ªßa n√≥ v√†o gi·ªè h√†ng c·ªßa b·∫°n. N·∫øu kh√¥ng ghi r√µ s·ªë l∆∞·ª£ng, t√¥i s·∫Ω m·∫∑c ƒë·ªãnh l√† 100 gam.\n\n N·∫øu ch∆∞a bi·∫øt ch·ªçn m√≥n g√¨ h√£y nh·∫≠p 'm√≥n' ho·∫∑c 'th·ª±c ƒë∆°n', ch√∫ng t√¥i s·∫Ω ƒë·ªÅ xu·∫•t c√°c m√≥n ƒÉn c√≥ s·∫µn  ",
      }]);
    } else {
      setMessages([{
        sender: "bot",
        text: "Hello! Please enter a food item along with the amount in grams, and I will add its nutritional values to your cart. If no amount is specified, I will assume 100 grams by default.\n\nIf you are not sure what to choose, type ‚Äúmenu‚Äù and we will suggest available options.",
      }]);
    }
  }, [i18n.language]);

  const [loading, setLoading] = useState(false);
  const [cart, setCart] = useState([]);
  const userID = localStorage.getItem("userID");

  const sendMessage = async () => {
    if (!userInput.trim()) return;

    const newUserMessage = { sender: "user", text: userInput };
    setMessages((prev) => [...prev, newUserMessage]);
    setLoading(true);

    try {
      const res = await axios.post("http://127.0.0.1:2020/chat", {
        prompt: userInput,
      });

      const botText = res.data.reply;
      const test = res.data;
      console.log(test);
      
      
      const botMessage = { sender: "bot", text: botText };
      setMessages((prev) => [...prev, botMessage]);
      const gramsMatch = botText.match(/(\d+(?:\.\d+)?)\s*(?:g|gram|grams)/i);
      const proteinMatch = botText.match(
        /(\d+(?:\.\d+)?)\s*(?:g|gram|grams)\s+of\s+protein/i
      );
      const fatMatch = botText.match(
        /(\d+(?:\.\d+)?)\s*(?:g|gram|grams)[^.\d]*?fat/i
      );
      const carbsMatch = botText.match(
        /(\d+(?:\.\d+)?)\s*(?:g|gram|grams)\s+of\s+carbs|no\s+carbs|carb[-\s]?free|completely\s+carb[-\s]?free/i
      );
      const caloriesMatch = botText.match(
        /(\d+(?:\.\d+)?)\s*(?:kcal|calories)/i
      );      
      if (proteinMatch && fatMatch && caloriesMatch && gramsMatch) {
  const grams = parseFloat(gramsMatch[1]);
  const protein = parseFloat(proteinMatch[1]);
  const fat = parseFloat(fatMatch[1]);
  const carbs = carbsMatch
    ? carbsMatch[1]
      ? parseFloat(carbsMatch[1])
      : 0
    : 0;
  const calories = parseFloat(caloriesMatch[1]);

  const foodItem = { calories, protein, fat, carbs, grams };
  setCart((prev) => [...prev, foodItem]);}
  
    } catch (error) {
      const errorMessage = {
        sender: "bot",
        text: "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.",
      };
      setMessages((prev) => [...prev, errorMessage]);
      console.error("L·ªói khi g·ª≠i request:", error);
    }

    setUserInput("");
    setLoading(false);
  };
  useEffect(() => {
    const updateFirestoreCart = async () => {
      if (!userID || cart.length === 0) return;

      try {
        const docRef = doc(db, "users", userID);
        const docSnap = await getDoc(docRef);

        const today = new Date().toISOString().split("T")[0]; // L·∫•y ƒë·ªãnh d·∫°ng yyyy-mm-dd
        let resetCart = false;
        let updatedCart = [];

        if (docSnap.exists()) {
          const data = docSnap.data();
          const existingCart = data.Cart || [];
          const lastUpdatedDate = data.lastCartUpdate
            ?.toDate?.()
            .toISOString()
            .split("T")[0];

          if (lastUpdatedDate !== today) {
            resetCart = true;
            updatedCart = [...cart];
          } else {
            updatedCart = [...existingCart, ...cart];
          }
        } else {
          updatedCart = [...cart];
          resetCart = true;
        }

        await setDoc(
          docRef,
          {
            Cart: updatedCart,
            lastCartUpdate: serverTimestamp(),
          },
          { merge: true }
        );

        if (resetCart) {
          console.log("üóì Cart ƒë∆∞·ª£c reset do ng√†y m·ªõi:", today);
        }

        console.log("‚úÖ Firestore c·∫≠p nh·∫≠t th√†nh c√¥ng:", updatedCart);
      } catch (err) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t Firestore:", err);
      }
    };

    updateFirestoreCart();
  }, [cart]);

  return (
    <main>
      <div className="wrapper aximo-all-section chat">
        <div className="chatTop">
          {messages.map((msg, idx) => (
            <div
              className="chatElementsOutter"
              key={idx}
              style={{
                justifyContent:
                  msg.sender === "user" ? "flex-end" : "flex-start",
              }}
            >
              <div className="chatElements">
                <ReactMarkdown>{msg.text}</ReactMarkdown>
                <SpeakTextButton text={msg.text} lang={i18n.language} />
              </div>
            </div>
          ))}
        </div>

        <div className="chatBottomGroup">
          <input
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            placeholder={t("placeholderChat")}
            onKeyDown={(e) => e.key === "Enter" && sendMessage()}
            className="chatInput"
          />
          <button
            className="chatButton"
            onClick={sendMessage}
            disabled={loading}
          >
            {loading ? "..." : "G·ª≠i"}
          </button>
        </div>
      </div>
    </main>
  );
}
export default Chat;
